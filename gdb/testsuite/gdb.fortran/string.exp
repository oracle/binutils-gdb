# Copyright 2008 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# This file was written by Jan Kratochvil <jan.kratochvil@redhat.com>.

# This file is part of the gdb testsuite.  It contains tests for Fortran
# strings with dynamic length.

set testfile "string"
set srcfile ${testfile}.f90
set binfile [standard_output_file ${testfile}]

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug f90 quiet}] != "" } {
    untested "Couldn't compile ${srcfile}"
    return -1
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

if ![runto MAIN__] then {
    perror "couldn't run to breakpoint MAIN__"
    continue
}

gdb_breakpoint [gdb_get_line_number "var-init"]
gdb_continue_to_breakpoint "var-init"
gdb_test "ptype c" "type = character(\\(kind=1\\)|\\*1)"
gdb_test "ptype d" "type = character(\\(kind=8\\)|\\*8)"
gdb_test "ptype e" "type = character(\\(kind=4\\)|\\*4)"
gdb_test "ptype f" "type = character(\\(kind=4\\)|\\*4) \\(7,8:10\\)"
gdb_test "ptype *e" "Attempt to take contents of a non-pointer value."
gdb_test "ptype *f" "type = character(\\(kind=4\\)|\\*4) \\(7\\)"
gdb_test "p c" "\\$\[0-9\]* = 'c'"
gdb_test "p d" "\\$\[0-9\]* = 'd       '"
gdb_test "p e" "\\$\[0-9\]* = 'g   '"
gdb_test "p f" "\\$\[0-9\]* = \\(\\( 'h   ', 'h   ', 'h   ', 'h   ', 'h   ', 'h   ', 'h   '\\) \\( 'h   ', 'h   ', 'h   ', 'h   ', 'h   ', 'h   ', 'h   '\\) \\( 'h   ', 'h   ', 'h   ', 'h   ', 'h   ', 'h   ', 'h   '\\) \\)"
gdb_test "p *e" "Attempt to take contents of a non-pointer value."
gdb_test "p *f" "Attempt to take contents of a non-pointer value."

gdb_breakpoint [gdb_get_line_number "var-finish"]
gdb_continue_to_breakpoint "var-finish"
gdb_test "p e" "\\$\[0-9\]* = 'e   '" "p e re-set"
gdb_test "p f" "\\$\[0-9\]* = \\(\\( 'f   ', 'f   ', 'f   ', 'f   ', 'f   ', 'f   ', 'f   '\\) \\( 'f2  ', 'f   ', 'f   ', 'f   ', 'f   ', 'f   ', 'f   '\\) \\( 'f   ', 'f   ', 'f   ', 'f   ', 'f   ', 'f   ', 'f   '\\) \\)" "p *f re-set"
