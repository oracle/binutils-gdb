# Copyright 2014 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

standard_testfile ".f90"

if { [prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} \
    {debug f90 quiet}] } {
    return -1
}

# check that all fortran standard datatypes will be
# handled correctly when using as VLA's

if ![runto MAIN__] then {
    perror "couldn't run to breakpoint MAIN__"
    continue
}

gdb_breakpoint [gdb_get_line_number "var_char-allocated-1"]
gdb_continue_to_breakpoint "var_char-allocated-1"
gdb_test "print var_char" \
  " = \\(PTR TO -> \\( character\\*10 \\)\\) ${hex}" \
  "print var_char after allocated first time"
gdb_test "whatis var_char" "type = PTR TO -> \\( character\\*10 \\)" \
  "whatis var_char first time"
gdb_test "ptype var_char" "type = PTR TO -> \\( character\\*10 \\)" \
  "ptype var_char first time"
gdb_test "next" "\\d+.*var_char = 'foo'.*" \
  "next to allocation status of var_char"
gdb_test "print l" " = .TRUE." "print allocation status first time"

gdb_breakpoint [gdb_get_line_number "var_char-filled-1"]
gdb_continue_to_breakpoint "var_char-filled-1"
gdb_test "print var_char" \
  " = \\(PTR TO -> \\( character\\*3 \\)\\) ${hex}" \
  "print var_char after filled first time"
gdb_test "print *var_char" " = 'foo'" \
  "print *var_char after filled first time"
gdb_test "whatis var_char" "type = PTR TO -> \\( character\\*3 \\)" \
  "whatis var_char after filled first time"
gdb_test "ptype var_char" "type = PTR TO -> \\( character\\*3 \\)" \
  "ptype var_char after filled first time"
gdb_test "print var_char(1)" " = 102 'f'" "print var_char(1)"
gdb_test "print var_char(3)" " = 111 'o'" "print var_char(3)"

gdb_breakpoint [gdb_get_line_number "var_char-filled-2"]
gdb_continue_to_breakpoint "var_char-filled-2"
gdb_test "print var_char" \
  " = \\(PTR TO -> \\( character\\*6 \\)\\) ${hex}" \
  "print var_char after allocated second time"
gdb_test "print *var_char" " = 'foobar'" \
  "print *var_char after allocated second time"
gdb_test "whatis var_char" "type = PTR TO -> \\( character\\*6 \\)" \
  "whatis var_char second time"
gdb_test "ptype var_char" "type = PTR TO -> \\( character\\*6 \\)" \
  "ptype var_char second time"

gdb_breakpoint [gdb_get_line_number "var_char-empty"]
gdb_continue_to_breakpoint "var_char-empty"
gdb_test "print var_char" \
  " = \\(PTR TO -> \\( character\\*0 \\)\\) ${hex}" \
  "print var_char after set empty"
gdb_test "print *var_char" " = \"\"" "print *var_char after set empty"
gdb_test "whatis var_char" "type = PTR TO -> \\( character\\*0 \\)" \
  "whatis var_char after set empty"
gdb_test "ptype var_char" "type = PTR TO -> \\( character\\*0 \\)" \
  "ptype var_char after set empty"

gdb_breakpoint [gdb_get_line_number "var_char-allocated-3"]
gdb_continue_to_breakpoint "var_char-allocated-3"
gdb_test "print var_char" \
  " = \\(PTR TO -> \\( character\\*21 \\)\\) ${hex}" \
  "print var_char after allocated third time"
gdb_test "whatis var_char" "type = PTR TO -> \\( character\\*21 \\)" \
  "whatis var_char after allocated third time"
gdb_test "ptype var_char" "type = PTR TO -> \\( character\\*21 \\)" \
  "ptype var_char after allocated third time"

gdb_breakpoint [gdb_get_line_number "var_char_p-associated"]
gdb_continue_to_breakpoint "var_char_p-associated"
gdb_test "print var_char_p" \
  " = \\(PTR TO -> \\( character\\*7 \\)\\) ${hex}" \
  "print var_char_p after associated"
gdb_test "print *var_char_p" " = 'johndoe'" \
  "print *var_char_ after associated"
gdb_test "whatis var_char_p" "type = PTR TO -> \\( character\\*7 \\)" \
  "whatis var_char_p after associated"
gdb_test "ptype var_char_p" "type = PTR TO -> \\( character\\*7 \\)" \
  "ptype var_char_p after associated"
