# Copyright 2007 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# This file was written by Jan Kratochvil <jan.kratochvil@redhat.com>.

# This file is part of the gdb testsuite.  It contains tests for dynamically
# allocated Fortran arrays.
# It depends on the GCC dynamic Fortran arrays DWARF support:
# 	http://gcc.gnu.org/bugzilla/show_bug.cgi?id=22244

set testfile "dynamic"
set srcfile ${testfile}.f90
set binfile [standard_output_file ${testfile}]

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug f90 quiet}] != "" } {
    untested "Couldn't compile ${srcfile}"
    return -1
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

if ![runto MAIN__] then {
    perror "couldn't run to breakpoint MAIN__"
    continue
}

gdb_breakpoint [gdb_get_line_number "varx-init"]
gdb_continue_to_breakpoint "varx-init"

# http://www.cs.rpi.edu/~szymansk/OOF90/bugs.html#5
# Do not: gdb_test "p varx" "\\$\[0-9\]* = <not allocated>" "p varx unallocated"
# Do not: gdb_test "ptype varx" {type = real\(kind=4\) \(:,:,:\)} "ptype varx unallocated"
# Do not: gdb_test "p varx(1,5,17)" {no such vector element \(vector not allocated\)} "p varx(1,5,17) unallocated"
# Do not: gdb_test "p varx(1,5,17)=1" {no such vector element \(vector not allocated\)} "p varx(1,5,17)=1 unallocated"
# Do not: gdb_test "ptype varx(1,5,17)" {no such vector element \(vector not allocated\)} "ptype varx(1,5,17) unallocated"

gdb_breakpoint [gdb_get_line_number "varx-allocated"]
gdb_continue_to_breakpoint "varx-allocated"
# $1 = (( ( 0, 0, 0, 0, 0, 0) ( 0, 0, 0, 0, 0, 0) --- , 0) ) ( ( 0, 0, ...) ...) ...)
gdb_test "ptype varx" "type = real(\\(kind=4\\)|\\*4) \\(6,5:15,17:28\\)" "ptype varx allocated"
# Intel Fortran Compiler 10.1.008 uses -1 there, GCC uses 1.
gdb_test "p l" "\\$\[0-9\]* = (\\.TRUE\\.|4294967295)" "p l if varx allocated"

gdb_breakpoint [gdb_get_line_number "varx-filled"]
gdb_continue_to_breakpoint "varx-filled"
gdb_test "p varx(2, 5, 17)" "\\$\[0-9\]* = 6"
gdb_test "p varx(1, 5, 17)" "\\$\[0-9\]* = 7"
gdb_test "p varx(2, 6, 18)" "\\$\[0-9\]* = 8"
gdb_test "p varx(6, 15, 28)" "\\$\[0-9\]* = 9"
# http://www.cs.rpi.edu/~szymansk/OOF90/bugs.html#5
# Do not: gdb_test "p varv" "\\$\[0-9\]* = <not associated>" "p varv unassociated"
# Do not: gdb_test "ptype varv" {type = real\(kind=4\) \(:,:,:\)} "ptype varv unassociated"

set test "output varx"
gdb_test_multiple $test $test {
    -re "^output varx\r\n\[() ,6789.\]*$gdb_prompt $" {
	pass $test
    }
}

gdb_breakpoint [gdb_get_line_number "varv-associated"]
gdb_continue_to_breakpoint "varv-associated"
gdb_test "p varx(3, 7, 19)" "\\$\[0-9\]* = 6" "p varx(3, 7, 19) with varv associated"
gdb_test "p varv(3, 7, 19)" "\\$\[0-9\]* = 6" "p varv(3, 7, 19) associated"
# Intel Fortran Compiler 10.1.008 uses -1 there, GCC uses 1.
gdb_test "p l" "\\$\[0-9\]* = (\\.TRUE\\.|4294967295)" "p l if varv associated"
gdb_test "ptype varx" "type = real(\\(kind=4\\)|\\*4) \\(6,5:15,17:28\\)" "ptype varx with varv associated"
# Intel Fortran Compiler 10.1.008 uses the pointer type.
gdb_test "ptype varv" "type = (PTR TO -> \\( )?real(\\(kind=4\\)|\\*4) \\(6,5:15,17:28\\)\\)?" "ptype varv associated"

gdb_breakpoint [gdb_get_line_number "varv-filled"]
gdb_continue_to_breakpoint "varv-filled"
gdb_test "p varx(3, 7, 19)" "\\$\[0-9\]* = 10" "p varx(3, 7, 19) with varv filled"
gdb_test "p varv(3, 7, 19)" "\\$\[0-9\]* = 10" "p varv(3, 7, 19) filled"

gdb_breakpoint [gdb_get_line_number "varv-deassociated"]
gdb_continue_to_breakpoint "varv-deassociated"
# The latter one is for the Intel Fortran Compiler 10.1.008 pointer type.
gdb_test "p varv" "\\$\[0-9\]* = (<not associated>|.*(Cannot access it|Unable to access the object) because the object is not associated.)" "p varv deassociated"
gdb_test "ptype varv" {type = real\(kind=4\) \(:,:,:\)} "ptype varv deassociated"
gdb_test "p l" "\\$\[0-9\]* = \\.FALSE\\." "p l if varv deassociated"
gdb_test "p varv(1,5,17)" {no such vector element \(vector not associated\)}
gdb_test "ptype varv(1,5,17)" {no such vector element \(vector not associated\)}

gdb_breakpoint [gdb_get_line_number "varx-deallocated"]
gdb_continue_to_breakpoint "varx-deallocated"
gdb_test "p varx" "\\$\[0-9\]* = <not allocated>" "p varx deallocated"
gdb_test "ptype varx" {type = real\(kind=4\) \(:,:,:\)} "ptype varx deallocated"
gdb_test "p l" "\\$\[0-9\]* = \\.FALSE\\." "p l if varx deallocated"
gdb_test "p varx(1,5,17)" {no such vector element \(vector not allocated\)} "p varx(1,5,17) deallocated"
gdb_test "ptype varx(1,5,17)" {no such vector element \(vector not allocated\)} "ptype varx(1,5,17) deallocated"

gdb_breakpoint [gdb_get_line_number "vary-passed"]
gdb_continue_to_breakpoint "vary-passed"
# $1 = (( ( 1, 1, 1, 1, 1, 1) ( 1, 1, 1, 1, 1, 1) --- , 1) ) ( ( 1, 1, ...) ...) ...)
gdb_test "p vary" "\\$\[0-9\]* = \\(\[()1, .\]*\\)"

gdb_breakpoint [gdb_get_line_number "vary-filled"]
gdb_continue_to_breakpoint "vary-filled"
gdb_test "ptype vary" "type = real(\\(kind=4\\)|\\*4) \\(10,10\\)"
gdb_test "p vary(1, 1)" "\\$\[0-9\]* = 8"
gdb_test "p vary(2, 2)" "\\$\[0-9\]* = 9"
gdb_test "p vary(1, 3)" "\\$\[0-9\]* = 10"
# $1 = (( ( 3, 3, 3, 3, 3, 3) ( 3, 3, 3, 3, 3, 3) --- , 3) ) ( ( 3, 3, ...) ...) ...)
gdb_test "p varw" "\\$\[0-9\]* = \\(\[()3, .\]*\\)"

gdb_breakpoint [gdb_get_line_number "varw-almostfilled"]
gdb_continue_to_breakpoint "varw-almostfilled"
gdb_test "ptype varw" "type = real(\\(kind=4\\)|\\*4) \\(5,4,3\\)"
gdb_test "p varw(3,1,1)=1" "\\$\[0-9\]* = 1"
# $1 = (( ( 6, 5, 1, 5, 5, 5) ( 5, 5, 5, 5, 5, 5) --- , 5) ) ( ( 5, 5, ...) ...) ...)
gdb_test "p varw" "\\$\[0-9\]* = \\( *\\( *\\( *6, *5, *1,\[()5, .\]*\\)" "p varw filled"
# "up" works with GCC but other Fortran compilers may copy the values into the
# outer function only on the exit of the inner function.
# We need both variants as depending on the arch we optionally may still be
# executing the caller line or not after `finish'.
gdb_test "finish" ".*(call bar \\(y, x\\)|call foo \\(x, z\\(2:6, 4:7, 6:8\\)\\))"
gdb_test "p z(2,4,5)" "\\$\[0-9\]* = 3"
gdb_test "p z(2,4,6)" "\\$\[0-9\]* = 6"
gdb_test "p z(2,4,7)" "\\$\[0-9\]* = 5"
gdb_test "p z(4,4,6)" "\\$\[0-9\]* = 1"

gdb_breakpoint [gdb_get_line_number "varz-almostfilled"]
gdb_continue_to_breakpoint "varz-almostfilled"
# GCC uses the pointer type here, Intel Fortran Compiler 10.1.008 does not.
gdb_test "ptype varz" "type = (PTR TO -> \\( )?real(\\(kind=4\\)|\\*4) \\(\\*\\)\\)?"
# Intel Fortran Compiler 10.1.008 has a bug here - (2:11,7:7)
# as it produces DW_AT_lower_bound == DW_AT_upper_bound == 7.
gdb_test "ptype vart" "type = (PTR TO -> \\( )?real(\\(kind=4\\)|\\*4) \\(2:11,7:\\*\\)\\)?"
gdb_test "p varz" "\\$\[0-9\]* = \\(\\)"
gdb_test "p vart" "\\$\[0-9\]* = \\(\\)"
gdb_test "p varz(3)" "\\$\[0-9\]* = 4"
# maps to foo::vary(1,1)
gdb_test "p vart(2,7)" "\\$\[0-9\]* = 8"
# maps to foo::vary(2,2)
gdb_test "p vart(3,8)" "\\$\[0-9\]* = 9"
# maps to foo::vary(1,3)
gdb_test "p vart(2,9)" "\\$\[0-9\]* = 10"
