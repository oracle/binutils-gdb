# Copyright 2007, 2009 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Test GDB's handling of gcore for mapping with a name but zero inode.

if { [prepare_for_testing gcore-shmid0.exp gcore-shmid0] } {
    return -1
}

# Does this gdb support gcore?
set test "help gcore"
gdb_test_multiple $test $test {
    -re "Undefined command: .gcore.*$gdb_prompt $" {
	# gcore command not supported -- nothing to test here.
	unsupported "gdb does not support gcore on this target"
	return -1;
    }
    -re "Save a core file .*$gdb_prompt $" {
	pass $test
    }
}

if { ! [ runto_main ] } then {
    untested gcore-shmid0.exp
    return -1
}

gdb_breakpoint "initialized"
gdb_breakpoint "unresolved"

set oldtimeout $timeout
set timeout [expr $oldtimeout + 120]

set test "Continue to initialized."
gdb_test_multiple "continue" $test {
    -re "Breakpoint .*, initialized .* at .*\r\n$gdb_prompt $" {
	pass $test
    }
    -re "Breakpoint .*, unresolved .* at .*\r\n$gdb_prompt $" {
	set timeout $oldtimeout
	unsupported $test
	return -1
    }
}
set timeout $oldtimeout

set escapedfilename [string_to_regexp [standard_output_file gcore-shmid0.test]]

set test "save a corefile"
gdb_test_multiple "gcore [standard_output_file gcore-shmid0.test]" $test {
    -re "Saved corefile ${escapedfilename}\[\r\n\]+$gdb_prompt $" {
	pass $test
    }
    -re "Can't create a corefile\[\r\n\]+$gdb_prompt $" {
	unsupported $test
    }
}

# Be sure to remove the handle first.
# But it would get removed even on a kill by GDB as the handle is already
# deleted, just it is still attached.
gdb_continue_to_end "finish"

set test "core-file command"
gdb_test_multiple "core-file [standard_output_file gcore-shmid0.test]" $test {
    -re ".* program is being debugged already.*y or n. $" {
	# gdb_load may connect us to a gdbserver.
	send_gdb "y\n"
	exp_continue;
    }
    -re "Core was generated by .*\r\n\#0  .*\\\(\\\).*\r\n$gdb_prompt $" {
	# The filename does not fit there anyway so do not check it.
	pass $test
    }
    -re ".*registers from core file: File in wrong format.* $" {
	fail "core-file command (could not read registers from core file)"
    }
}

set test "backtrace"
gdb_test_multiple "bt" $test {
    -re "#0 *initialized \\\(\\\) at .*#1 .* main \\\(.*$gdb_prompt $" {
	pass $test
    }
    -re "#0 *initialized \\\(\\\) at .*Cannot access memory at address .*$gdb_prompt $" {
	fail $test
    }
}
