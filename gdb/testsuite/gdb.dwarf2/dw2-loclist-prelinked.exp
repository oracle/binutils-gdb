# Copyright 2008 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# Minimal DWARF-2 unit test

# This test can only be run on i386/x86_64 targets which support DWARF-2.
# For now pick a sampling of likely targets.
if {(![istarget *-*-linux*]
     && ![istarget *-*-gnu*]
     && ![istarget *-*-elf*]
     && ![istarget *-*-openbsd*])
    || (![istarget "i?86-*-*"] && ![istarget "x86_64-*-*"])} {
    return 0  
}

set testfile "dw2-loclist-prelinked"
set srcfuncfile ${testfile}-func.S
set binsharedfuncfile [standard_output_file ${testfile}.so]
set srcmainfile ${testfile}-main.c
set binfile [standard_output_file ${testfile}]

remote_exec build "rm -f ${binfile}"

# get the value of gcc_compiled
if [get_compiler_info ${binfile}] {
    return -1
}

# This test can only be run on gcc as we use additional_flags=FIXME
if {$gcc_compiled == 0} {
    return 0
}

if  { [gdb_compile_shlib "${srcdir}/${subdir}/${srcfuncfile}" "${binsharedfuncfile}" {debug additional_flags=-m32}] != "" } {
    untested "Couldn't compile test library"
    return -1
}

# The new separate debug info file will be stored in the .debug subdirectory.

if [gdb_gnu_strip_debug ${binsharedfuncfile}] {
    # check that you have a recent version of strip and objcopy installed
    unsupported "cannot produce separate debug info files"
    return -1
}

if {[catch "system \"/usr/sbin/prelink -qNR --no-exec-shield ${binsharedfuncfile}\""] != 0} {
    # Maybe we don't have prelink.
    return -1
}

if  { [gdb_compile "${srcdir}/${subdir}/${srcmainfile}" \
		   "${binfile}" executable [list debug additional_flags=-m32 shlib=${binsharedfuncfile}]] != "" } {
    return -1
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

gdb_run_cmd

gdb_test "" "Program received signal SIGABRT, Aborted..*" "Enter abort()"

# Incorrect:
# #0  0x00110430 in __kernel_vsyscall ()
# No symbol table info available.
# #1  0x003d44c0 in raise () from /lib/libc.so.6
# No symbol table info available.
# #2  0x003d5e88 in abort () from /lib/libc.so.6
# No symbol table info available.
# #3  0x44f10437 in func () at dw2-loclist-prelinked.c:8
# 	i = Could not find the frame base for "func".

# Correct:
# #0  0x00110430 in __kernel_vsyscall ()
# No symbol table info available.
# #1  0x003d44c0 in raise () from /lib/libc.so.6
# No symbol table info available.
# #2  0x003d5e88 in abort () from /lib/libc.so.6
# No symbol table info available.
# #3  0x4ae36437 in func () at dw2-loclist-prelinked.c:8
# 	i = 3827288
# #4  0x0804851a in main () at ../../../gdb/testsuite/gdb.dwarf2/dw2-loclist-prelinked-main.c:24
# No locals.

# `abort' can get expressed as `*__GI_abort'.
gdb_test "bt full" "in \[^ \]*abort \\(.*in func \\(.*\r\n\[\t \]+i = -?\[0-9\].*in main \\(.*" "Backtrace after abort()"
