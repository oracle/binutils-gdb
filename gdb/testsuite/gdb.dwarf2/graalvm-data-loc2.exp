# Copyright 2014-2020 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
load_lib dwarf.exp

# This test can only be run on targets which support DWARF-2 and use gas.
if {![dwarf2_support]} {
    return 0
}

standard_testfile .c -dw.S

if { [prepare_for_testing "failed to prepare" ${testfile} ${srcfile}] } {
    return -1
}

# Make some DWARF for the test.
set asm_file [standard_output_file $srcfile2]
Dwarf::assemble $asm_file {
    
    cu {} {
 	DW_TAG_compile_unit {
                {DW_AT_language @DW_LANG_C99}
                {DW_AT_name     data-loc2.c}
                {DW_AT_comp_dir /tmp}
        } {
            declare_labels integer_label struct_label pointer_label

            integer_label: DW_TAG_base_type {
                {DW_AT_byte_size 4 DW_FORM_sdata}
                {DW_AT_encoding  @DW_ATE_signed}
                {DW_AT_name      integer}
            }

	    struct_label: DW_TAG_structure_type {
		{DW_AT_name "Object"}
		{DW_AT_byte_size 20 DW_FORM_sdata}
                {DW_AT_data_location {
                    DW_OP_push_object_address
                } SPECIAL_expr}
	    } {
		member {
		    {name next}
		    {type :$pointer_label}
		    {data_member_location 0 data1}
		}
		member {
		    {name val}
		    {type :$integer_label}
		    {data_member_location 8 data1}
		}
	    }
	    pointer_label: DW_TAG_pointer_type {
		{DW_AT_byte_size 4 DW_FORM_sdata}
		{DW_AT_type  :$struct_label}
	    }
            DW_TAG_variable {
                {DW_AT_name testOop}
                {DW_AT_type :$pointer_label}
                {DW_AT_location {
                    DW_OP_addr [gdb_target_symbol testOop]
                } SPECIAL_expr}
                {external 1 flag}
            }
	}
    }
}

# Now that we've generated the DWARF debugging info, rebuild our
# program using our debug info instead of the info generated by
# the compiler.

if { [prepare_for_testing "failed to prepare" ${testfile} \
	  [list $srcfile $asm_file] {nodebug}] } {
    return -1
}

if ![runto_main] {
    return -1
}

# ensure the object network is set up as expected and check that
# printing of structs which employ the data_location does not
# fail with a gdb exception

gdb_test "break debugMe" \
         "Breakpoint .*" \
         "set breakpoint at debugMe"

gdb_continue_to_breakpoint "continue to debugMe"

gdb_test "print testOop->val" \
         ".* = 0"

gdb_test "print testOop->next->val" \
         ".* = 1"

gdb_test "print testOop->next->next->val" \
         ".* = 2"

gdb_test "print *testOop" \
    ".* = {next = .*, val = 0}" \
    "print contents of struct"

gdb_test "print *testOop->next" \
    ".* = {next = .*, val = 1}" \
    "print contents of an indirect struct"

gdb_test "print *testOop->next->next" \
    ".* = {next = .*, val = 2}" \
    "print contents of a double indirect struct"
