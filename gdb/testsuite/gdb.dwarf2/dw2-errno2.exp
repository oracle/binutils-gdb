# Copyright 2007 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set testfile dw2-errno2
set srcfile ${testfile}.c
set binfile [standard_output_file ${testfile}]

proc prep { message {do_xfail 0} } { with_test_prefix $message {
    global srcdir subdir binfile variant
    gdb_exit
    gdb_start
    gdb_reinitialize_dir $srcdir/$subdir
    gdb_load ${binfile}${variant}

    runto_main

    gdb_breakpoint [gdb_get_line_number "breakpoint"]
    gdb_continue_to_breakpoint "breakpoint"

    gdb_test "gcore ${binfile}${variant}.core" "\r\nSaved corefile .*" "gcore $variant"

    gdb_test "print errno" ".* = 42"

    gdb_test "kill" ".*" "kill" {Kill the program being debugged\? \(y or n\) } "y"
    gdb_test "core-file ${binfile}${variant}.core" "\r\nCore was generated by .*" "core-file"
    if $do_xfail {
	setup_xfail "*-*-*"
    }
    gdb_test "print (int) errno" ".* = 42" "print errno for core"
}}

set variant g2thrN
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}${variant}" executable "additional_flags=-g2"] != "" } {
    untested "Couldn't compile test program"
    return -1
}
prep "macros=N threads=N" 1

set variant g3thrN
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}${variant}" executable "additional_flags=-g3"] != "" } {
    untested "Couldn't compile test program"
    return -1
}
prep "macros=Y threads=N" 1

set variant g2thrY
if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}${variant}" executable "additional_flags=-g2"] != "" } {
    return -1
}
prep "macros=N threads=Y"

set variant g3thrY
if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}${variant}" executable "additional_flags=-g3"] != "" } {
    return -1
}
prep "macros=Y threads=Y" 1

# TODO: Test the error on resolving ERRNO with only libc loaded.
# Just how to find the current libc filename?
