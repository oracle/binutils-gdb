# This testcase is part of GDB, the GNU debugger.

# Copyright 2005 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Check that GDB can support multiple watchpoints across threads.

# This test verifies that a watchpoint is detected in the proper thread
# so the test is only meaningful on a system with hardware watchpoints.
if [target_info exists gdb,no_hardware_watchpoints] {
    return 0;
}

set testfile "watchthreads-threaded"
set srcfile ${testfile}.c
set binfile [standard_output_file ${testfile}]
if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable [list debug "incdir=${objdir}"]] != "" } {
    return -1
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

gdb_test "set can-use-hw-watchpoints 1" "" ""

#
# Run to `main' where we begin our tests.
#

if ![runto_main] then {
    gdb_suppress_tests
}

set args_2 0
set args_3 0

gdb_breakpoint "thread_function"
gdb_continue_to_breakpoint "thread_function"
gdb_test "disable 2" ""

gdb_test_multiple "p args\[2\]" "get initial args2" {
  -re "\\\$\[0-9\]* = (.*)$gdb_prompt $" {
    set init_args_2 $expect_out(1,string)
    pass "get initial args2"
  }
}

gdb_test_multiple "p args\[3\]" "get initial args3" {
  -re "\\\$\[0-9\]* = (.*)$gdb_prompt $" {
    set init_args_3 $expect_out(1,string)
    pass "get initial args3"
  }
}

set args_2 $init_args_2
set args_3 $init_args_3

# Watch values that will be modified by distinct threads.
gdb_test "watch args\[2\]" "Hardware watchpoint 3: args\\\[2\\\]"
gdb_test "watch args\[3\]" "Hardware watchpoint 4: args\\\[3\\\]"

set init_line [expr [gdb_get_line_number "Init value"]+1]
set inc_line [gdb_get_line_number "Loop increment"]

# Loop and continue to allow both watchpoints to be triggered.
for {set i 0} {$i < 30} {incr i} {
  set test_flag 0
  gdb_test_multiple "continue" "threaded watch loop" {
    -re "Hardware watchpoint 3: args\\\[2\\\].*Old value = 0.*New value = 1.*main \\\(\\\) at .*watchthreads-threaded.c:$init_line.*$gdb_prompt $"
       { set args_2 1; set test_flag 1 }
    -re "Hardware watchpoint 4: args\\\[3\\\].*Old value = 0.*New value = 1.*main \\\(\\\) at .*watchthreads-threaded.c:$init_line.*$gdb_prompt $"
       { set args_3 1; set test_flag 1 }
    -re "Hardware watchpoint 3: args\\\[2\\\].*Old value = $args_2.*New value = [expr $args_2+1].*in thread_function \\\(arg=0x2\\\) at .*watchthreads-threaded.c:$inc_line.*$gdb_prompt $"
       { set args_2 [expr $args_2+1]; set test_flag 1 }
    -re "Hardware watchpoint 4: args\\\[3\\\].*Old value = $args_3.*New value = [expr $args_3+1].*in thread_function \\\(arg=0x3\\\) at .*watchthreads-threaded.c:$inc_line.*$gdb_prompt $"
       { set args_3 [expr $args_3+1]; set test_flag 1 }
  }
  # If we fail above, don't bother continuing loop
  if { $test_flag == 0 } {
    set i 30;
  }
}

# Print success message if loop succeeded.
if { $test_flag == 1 } {
  pass "threaded watch loop"
}

# Verify that we hit first watchpoint in child thread.
set message "watchpoint on args\[2\] hit in thread"
if { $args_2 > 1 } {
  pass $message 
} else {
  fail $message
}

# Verify that we hit second watchpoint in child thread.
set message "watchpoint on args\[3\] hit in thread"
if { $args_3 > 1 } {
  pass $message 
} else {
  fail $message 
}

# Verify that all watchpoint hits are accounted for.
set message "combination of threaded watchpoints = 30 + initial values"
if { [expr $args_2+$args_3] == [expr [expr 30+$init_args_2]+$init_args_3] } {
  pass $message 
} else {
  fail $message 
}
