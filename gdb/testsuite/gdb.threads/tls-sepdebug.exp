# Copyright 2006 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

if $tracelevel then {
    strace $tracelevel
}

set testfile tls-sepdebug
set srcmainfile   ${testfile}-main.c
set srcsharedfile ${testfile}-shared.c

set binmainfile        [standard_output_file ${testfile}-main]
set binsharedbase      ${testfile}-shared.so
set binsharedfile      [standard_output_file ${binsharedbase}]
set binshareddebugfile [standard_output_file ${binsharedbase}.debug]

# Use explicit -soname as otherwise the full path to the library would get
# encoded into ${binmainfile} making LD_LIBRARY_PATH tests useless.

# FIXME: gcc dependency (-Wl,-soname).

if  { [gdb_compile_shlib "${srcdir}/${subdir}/${srcsharedfile}" "${binsharedfile}" [list debug additional_flags=-Wl,-soname=${binsharedbase}]] != "" } {
    untested "Couldn't compile test library"
    return -1
}

# eu-strip(1) works fine but it is a part of `elfutils', not `binutils'.
if 0 then {
    remote_exec build "eu-strip -f ${binshareddebugfile} ${binsharedfile}"
} else {
    remote_exec build "objcopy --only-keep-debug ${binsharedfile} ${binshareddebugfile}"
    remote_exec build "objcopy --strip-debug ${binsharedfile}"
    remote_exec build "objcopy --add-gnu-debuglink=${binshareddebugfile} ${binsharedfile}"
}

# Do not use `shlib=' as it will automatically add also -rpath for gcc.

if  { [gdb_compile_pthreads "${srcdir}/${subdir}/${srcmainfile} ${binsharedfile}" "${binmainfile}" executable {debug}] != "" } {
    untested "Couldn't compile test program"
    return -1
}

# Get things started.

# Test also the proper resolving of relative library names to absolute ones.
# \$PWD is easy - it is the absolute way
# ${subdir} would fail on "print var"

set absdir [file dirname [standard_output_file ${binsharedbase}]]
foreach ld_library_path [list $absdir [relative_filename [pwd] $absdir]] name { absolute relative }  {

    gdb_exit
    gdb_start
    ###gdb_reinitialize_dir $srcdir/$subdir
    
    gdb_test "set env LD_LIBRARY_PATH=$ld_library_path" \
             "" \
             "set env LD_LIBRARY_PATH is $name"
    
    gdb_load ${binmainfile}
    
    # For C programs, "start" should stop in main().
    
    gdb_test "start" \
             "main \\(\\) at .*${srcmainfile}.*" \
             "start"
    
    # Check for: Cannot find shared library `/usr/lib/debug/lib/libc-2.4.90.so.debug' in dynamic linker's load module list
    # as happens with TLS variables and `separate_debug_objfile_backlink'.
    
    gdb_test "print var" \
             "\\\$1 = \[0-9\].*" \
             "print TLS variable from a shared library with $name-directory separate debug info file"
}
